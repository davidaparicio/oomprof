// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package oomprof

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type bpfEvent struct {
	_         structs.HostLayout
	EventType uint32
	Payload   uint32
}

type bpfGoProc struct {
	_              structs.HostLayout
	Mbuckets       uint64
	NumBuckets     uint32
	MaxStackErrors uint32
	ReadError      bool
	Complete       bool
	ReportAlloc    bool
	_              [5]byte
}

type bpfGobucket struct {
	_      structs.HostLayout
	Header struct {
		_          structs.HostLayout
		Next       uint64
		Allnext    uint64
		BucketType uint64
		Hash       uint64
		Size       uint64
		Nstk       uint64
	}
	Stk          [128]uint64
	WrongDontUse bpfMemRecord
}

type bpfMemRecord struct {
	_      structs.HostLayout
	Active struct {
		_          structs.HostLayout
		Allocs     uint64
		Frees      uint64
		AllocBytes uint64
		FreeBytes  uint64
	}
	Future [3]struct {
		_          structs.HostLayout
		Allocs     uint64
		Frees      uint64
		AllocBytes uint64
		FreeBytes  uint64
	}
}

type bpfProfileState struct {
	_            structs.HostLayout
	Pid          uint32
	_            [4]byte
	Gobp         uint64
	BucketCount  uint32
	NumTailCalls uint32
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	OomMarkVictimHandler     *ebpf.ProgramSpec `ebpf:"oom_mark_victim_handler"`
	RecordProfileBucketsProg *ebpf.ProgramSpec `ebpf:"record_profile_buckets_prog"`
	SignalProbe              *ebpf.ProgramSpec `ebpf:"signal_probe"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	DummyEventMap  *ebpf.MapSpec `ebpf:"dummy_event_map"`
	DummyRecordMap *ebpf.MapSpec `ebpf:"dummy_record_map"`
	GoProcs        *ebpf.MapSpec `ebpf:"go_procs"`
	MemBuckets     *ebpf.MapSpec `ebpf:"mem_buckets"`
	ProfilePid     *ebpf.MapSpec `ebpf:"profile_pid"`
	ProfileState   *ebpf.MapSpec `ebpf:"profile_state"`
	SignalEvents   *ebpf.MapSpec `ebpf:"signal_events"`
	TailCallMap    *ebpf.MapSpec `ebpf:"tail_call_map"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	DummyEventMap  *ebpf.Map `ebpf:"dummy_event_map"`
	DummyRecordMap *ebpf.Map `ebpf:"dummy_record_map"`
	GoProcs        *ebpf.Map `ebpf:"go_procs"`
	MemBuckets     *ebpf.Map `ebpf:"mem_buckets"`
	ProfilePid     *ebpf.Map `ebpf:"profile_pid"`
	ProfileState   *ebpf.Map `ebpf:"profile_state"`
	SignalEvents   *ebpf.Map `ebpf:"signal_events"`
	TailCallMap    *ebpf.Map `ebpf:"tail_call_map"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.DummyEventMap,
		m.DummyRecordMap,
		m.GoProcs,
		m.MemBuckets,
		m.ProfilePid,
		m.ProfileState,
		m.SignalEvents,
		m.TailCallMap,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	OomMarkVictimHandler     *ebpf.Program `ebpf:"oom_mark_victim_handler"`
	RecordProfileBucketsProg *ebpf.Program `ebpf:"record_profile_buckets_prog"`
	SignalProbe              *ebpf.Program `ebpf:"signal_probe"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.OomMarkVictimHandler,
		p.RecordProfileBucketsProg,
		p.SignalProbe,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
